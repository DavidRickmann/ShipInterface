weather <- flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
shiny::runApp()
library(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- flatten(weather$properties$timeseries)
View(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather2 <- flatten(weather$properties$timeseries)
weather2 <- flatten(weather$properties$timeseries)
weather2 <- (weather$properties$timeseries)
weather <- flatten(weather)
weather <- (weather$properties$timeseries)
weather <- flatten(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- (weather$properties$timeseries)
weather <- flatten(weather)
View(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- (weather$properties$timeseries)
View(weather)
weather <- flatten(weather, recursive = FALSE)
weather <- flatten(weather, recursive = TRUE)
weather <- flatten(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- as.data.frame(weather$properties$timeseries)
weather <- flatten(weather)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather2 <- as.data.frame(weather$properties$timeseries)
weather3 <- flatten(weather2)
View(weather3)
ibrary(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather2 <- as.data.frame(weather$properties$timeseries)
weather3 <- flatten(weather2)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather3 <- jsonlite::fromJSON(weather_URL)
weather4 <- as.data.frame(weather3$properties$timeseries)
weather5 <- jsonlite::flatten(weather4)
View(weather5)
colnames(weather4) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none") )
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(weather)
ymd_hms(2020-06-17T23:00:00Z)
parse_date_time(2020-06-17T23:00:00Z)
parse_date_time("2020-06-17T23:00:00Z")
parse_date_time("2020-06-17T23:00:00Z","Ymd HMS")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
runApp()
ggplot(weather, aes(x=time, y=precip_6hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
ggplot(weather, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
runApp()
runApp()
View(weather)
library(jsonlite)
library(dplyr)
library(lubridate)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
ggplot(weather, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(weather)
runApp()
library(jsonlite)
library(dplyr)
library(lubridate)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
weather2 <- weather %>% select(time, precip_1hr) %>% head(12)
View(weather2)
ggplot(weather2, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
weather2 <- weather %>% select(time, precip_1hr) %>% head(12)
ggplot(weather2, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
get(auth)
keys <- get("auth")
View(keys)
lat <- 51.484940
long <- -0.301890
stormglass_URL <- paste0('/"https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed/" -H /"Authorization:',keys$stormglass,'/"')
stormglass_URL <- paste0('/"https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed/" -H /"Authorization:',keys$stormglass,'/"')
stormglass <- jsonlite::fromJSON(stormglass_URL)
stormglass_URL <- paste0('https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed -H /"Authorization:',keys$stormglass,'/"')
stormglass <- jsonlite::fromJSON(stormglass_URL)
stormglass_URL <- paste0('https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed -H Authorization:',keys$stormglass)
stormglass <- jsonlite::fromJSON(stormglass_URL)
API_KEY = keys$stormglass
url = paste0("https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
API_KEY = keys$stormglass
url = paste0("https://api.stormglass.io/v2/weather/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
results[["errors"]][["params"]]
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long, "&start=2019-03-15&end=2019-03-15")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide//sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-01&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-01&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-18&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-17&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
result2 <- jsonlite::flatten(results$data)
result2 <- (results$data)
View(result2)
result2 <- unlist(results$data)
result2 <- jsonlite::flatten(as.data.frame(results$data))
View(result2)
result2 <- (as.data.frame(results$data))
results = fromJSON(content(httpResponse))
results = fromJSON(content(httpResponse, "text"))
results3 <- sapply(results, function(x) x [[2]] )
View(results3)
results3 <- sapply(results$data, function(x) x [[2]] )
results3 <- sapply(results$data, function(x) x[[1]][[2]] )
results$data[1]
results$data[2]
results$data$sg
results$data[[1]]$sg
results3 <- sapply(results$data, function(x) x[[1]]$sg )
result2[[1]]
result2[1]
result2[2]
result2[[1]][2]
result2[[1]][[1]]
result2[[1]][[2]]
result2[[1]][[0]]
result2[[1]][[1]]
result2[[2]][[1]]
result2[[3]][[1]]
result2[[4]][[1]]
result2[[4]]
result2[[5]]
result2[5]
result2[6]
result2 <- (results$data)
result2[[1]][[1]]
result2
result2$sg
result2$time
result2[[16]]$time
result2[[16]]$sg
unlist(result2)
result4 <- unlist(result2)
result5 <- flatten(result2)
View(result5)
result2[[sg]]
result2[[time]]
df <- ldply (result2, data.frame)
library(dplyr)
result2[[time]]
library(dplyr)
df <- ldply (result2, data.frame)
data.frame(t(sapply(results2,c)))
data.frame(t(sapply(result2,c)))
results3 <- data.frame(t(sapply(result2,c)))
View(results3)
results3 <- results3 %>% select(time = parse_date_time(time,"Ymd HMS"),tide = sg )
View(results3)
results3 <- results3 %>% select(time = parse_date_time(resuts3$time,"Ymd HMS"),tide = sg )
results3 <- results3 %>% select(time = parse_date_time(results3$time,"Ymd HMS"),tide = sg )
View(results3)
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3 <- data.frame(t(sapply(result2,c)))
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3 <- data.frame(t(sapply(result2,c))) %>% unnest()
results3 <- data.frame(t(sapply(result2,c))) %>% unnest(cols = c(time,sg))
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3$time <- parse_date_time(results3$time, "Ymd HMS")
View(results3)
results3 <- data.frame(t(sapply(result2,c))) %>% unnest(cols = c(time,sg))
View(results3)
?strptime
results3$time <- parse_date_time(results3$time, "Ymd HMSzzzz")
View(results3)
results3$time <- parse_date_time(results3$time, "Ymd HMSZZ:ZZ")
results3$time <- parse_date_time(results3$time, "Ymd HMS Z")
results3$time <- parse_date_time(results3$time, "Ymd HMS z")
View(results3)
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(results3)
system("python panels/environmental/res/plug.py")
py_install("kasa")
library(reticulate)
py_install("kasa")
use_condaenv("Vixen")
library(reticulate)
?reticulate
library(reticulate)
install.packages("reticulate")
library(reticulate)
py_install("kasa")
py_install("python-kasa")
pip install python-kasa
os <- import("os")
kasa < import("kasa-python")
kasa < import("kasa/-python")
kasa < import("kasa\-python")
kasa < import("kasapython")
kasa <- import("kasa-python")
use_python("C:\Users\Dave\AppData\Local\Programs\Python\Python38-32")
use_python("/Users/Dave/AppData/Local/Programs/Python/Python38-32")
kasa <- import("kasa-python")
py_install("kasa-python")
py_install("python-kasa")
kasa <- import("python-kasa")
conda_list()
?reticulate
virtualenv_list()
kasa <- import("python-kasa")
py_config()
use_python("/Users/Dave/AppData/Local/Programs/Python/Python38-32")
py_config()
py_install("ssl")
py_config()
conda_install(envname = "r-reticulate", packages="ssl")
library(reticulate)
kasa <- import("python-kasa")
?reticulate
py_available
py_available()
py_discover_config()
py_module_available(python-kasa)
py_module_available("python-kasa")
py_install("python-kasa")
library(reticulate)
kasa <- import("python-kasa")
py_install("python-kasa")
py_install("python-kasa")
kasa <- import("python-kasa")
kasa <- import("python-kasa")
py_config()
kasa <- import(python-kasa)
kasa <- import("python-kasa")
library(reticulate)
py_install("python-kasa")
py_config()
py_install("python-kasa", pip = TRUE)
py_install("python-kasa", pip = TRUE)
kasa <- import("python-kasa")
py_config()
use_condaenv("r-reticulate")
py_install("python-kasa", pip = TRUE)
py_module_available("python-kasa")
fh <- import("python-kasa")
conda_list()
use_condaenv("r-miniconda")
py_module_available("python-kasa")
py_install("python-kasa", pip = TRUE)
py_install("python-kasa")
conda_create("r-reticulate")
use_condaenv("r-reticulate")
py_install("python-kasa")
py_install("python-kasa", pip=TRUE)
py_module_available("python-kasa")
py_module_available("python-kasa")
kasa1 <- import("python-kasa")
py_install("python-kasa", pip=TRUE, env = "r-reticulate")
py_config()
py_module_available("python-kasa")
use_python("/Users/Dave/AppData/Local/r-miniconda/envs/r-reticulate/python.exe", required = T)
py_module_available("python-kasa")
py_config()
use_virtualenv(virtualenv = "r-reticulate")
py_module_available("python-kasa")
virtualenv_create("r-reticulate")
use_virtualenv(virtualenv = "r-reticulate")
py_module_available("python-kasa")
py_install("python-kasa", pip=TRUE, env = "r-reticulate")
?py_install
#install package (it's not available on conda)
py_install(packages = "python-kasa",
pip=TRUE,
envname =  "r-reticulate"
)
py_module_available("python-kasa")
?py_module_available
py_module_available(python-kasa)
path_to_python <- "/Users/Dave/AppData/Local/r-miniconda/envs/r-reticulate/python.exe"
use_python(path_to_python)
library(reticulate)
path_to_python <- "/Users/Dave/AppData/Local/r-miniconda/envs/r-reticulate/python.exe"
use_python(path_to_python)
#set conda env
conda_create("r-reticulate")
use_condaenv("r-reticulate")
#install package (it's not available on conda)
py_install(packages = "python-kasa",
pip=TRUE,
envname =  "r-reticulate"
)
py_module_available("python-kasa")
kasa1 <- import("python-kasa")
conda_remove("r-reticulate")
path_to_python <- "/Users/Dave/AppData/Local/r-miniconda/envs/r-reticulate/python.exe"
use_python(path_to_python)
conda_create("r-reticulate")
path_to_python <- "\Users\Dave\AppData\Local\Programs\Python\Python38-32"
use_python(path_to_python)
library(reticulate)
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
set conda env
conda_create("conda-kasa")
use_condaenv("conda-kasa")
#install package (it's not available on conda)
py_install(packages = "python-kasa",
pip=TRUE
)
py_module_available("python-kasa")
use_condaenv("conda-kasa")
py_config()
use_condaenv("conda-kasa")
py_config()
conda_install(envname = "conda-kasa",
packages = "python-kasa")
conda_install(envname = "conda-kasa",
packages = "python-kasa",
pip = TRUe)
conda_install(envname = "conda-kasa",
packages = "python-kasa",
pip = TRUE)
py_config()
py_module_available("python-kasa")
conda_install(envname = "r-reticulate",
packages = "python-kasa",
pip = TRUE)
py_module_available("python-kasa")
kasa1 <- reticulate::import("python-kasa")
?import
py_config()
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
library(reticulate)
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
py_config()
use_condaenv("conda-kasa")
py_config()
py_module_available("python-kasa")
kasa1 <- reticulate::import("python-kasa")
conda_install(envname = "conda-kasa",
packages = "python-kasa",
pip = TRUE)
py_config()
conda_create("conda-kasa")
py_config()
use_condaenv("conda-kasa")
py_config()
py_module_available("python-kasa")
kasa1 <- reticulate::import("python-kasa")
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
library(reticulate)
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
py_config()
install.packages(c("backports", "ggplot2", "htmltools", "isoband", "rmarkdown", "tinytex", "V8", "xfun"))
py_config()
library(reticulate)
path_to_python <- "/Users/Dave/AppData/Local/Programs/Python/Python38-32"
use_python(path_to_python)
py_config()
conda_create("conda-kasa")
use_condaenv("conda-kasa")
conda_install(envname = "conda-kasa",
packages = "python-kasa",
pip = TRUE)
py_config()
py_module_available("python-kasa")
kasa1 <- reticulate::import("python-kasa")
library(reticulate)
py_config()
py_install(packages = "numpy")
py_config()
py_module_available("python-kasa")
py_module_available("python-kasa")
py_module_available("python-kasa")
use_condaenv("conda-kasa")
py_config()
conda_install(envname = "r-reticulate",
packages = "python-kasa",
pip = TRUE)
py_module_available("python-kasa")
kasa1 <- reticulate::import("python-kasa")
use_condaenv("conda-kasa", required = TRUE)
py_config()
reticulate::use_condaenv("conda-kasa", required = TRUE)
reticulate::py_config()

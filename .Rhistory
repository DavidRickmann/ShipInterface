theme_lcars_dark() +
theme(legend.position = "none") ),
waiter_hide()
),
title = "Atmospheric Conditions",
subtitle = "Predicted Temperature",
corners = c(1,4),
sides = c(1,3,4),
left_inputs = home,
right_inputs = NULL,
color = "neon-carrot",
side_color = "neon-carrot",
title_color = "mariner",
subtitle_color = "mariner",
title_right = TRUE,
subtitle_right = TRUE,
clip = FALSE,
width_left = 150,
width_right = 60
)
)
})
}
panelApp <- function() {
ui <- lcarsPage(
weatherpanelUI("wp1")
)
server <- function(input, output, session) {
weatherpanel("wp1")
}
shinyApp(ui, server)
}
panelApp()
library(lcars)
library(ggplot2)
#This wrapper is required until shiny v1.5 is released.
moduleServer <- function(id, module) {
callModule(module, id)
}
#write a standard nav button function
#get the colours from the theme?
#allow assignation of standard colours in the config
weatherpanelUI <- function(id) {
use_waiter() # include dependencies
waiter_show_on_load()
uiOutput(NS(id, "panel"))
}
weatherpanel <- function(id) {
moduleServer(id, function(input, output, session) {
library(waiter)
library(weatherr)
library(tidyverse)
validate(
need( weather <- locationforecast(51.484940,-0.301890))
)
weathernow <- weather %>%
filter(row_number()==1)
home <- lcarsButton(
"Home",
"Home",
icon = NULL,
color = "neon-carrot",
hover_color = "mariner",
width = 150
)
output$panel <- renderLcarsBox(
lcarsBox(
fluidRow(
waiter_show( # show the waiter
spin_fading_circles() # use a spinner
),
renderPlot(ggplot(weather, aes(x=time, y=temperature)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none") ),
renderPlot(ggplot(weather, aes(x=time, y=windDirection)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none") ),
waiter_hide()
),
title = "Atmospheric Conditions",
subtitle = "Predicted Temperature",
corners = c(1,4),
sides = c(1,3,4),
left_inputs = home,
right_inputs = NULL,
color = "neon-carrot",
side_color = "neon-carrot",
title_color = "mariner",
subtitle_color = "mariner",
title_right = TRUE,
subtitle_right = TRUE,
clip = FALSE,
width_left = 150,
width_right = 60
)
)
})
}
panelApp <- function() {
ui <- lcarsPage(
weatherpanelUI("wp1")
)
server <- function(input, output, session) {
weatherpanel("wp1")
}
shinyApp(ui, server)
}
panelApp()
weather <- locationforecast(51.484940,-0.301890)
install.packages("future")
library(future)
plan(multiprocess)
weather.async <- function() {
future({
weather <- locationforecast(51.484940,-0.301890)
})
}
weather <- weather.async
View(weather)
weather <- weather.async()
View(weather)
runApp()
?weatherr
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/?lat=51.48494;lon=-0.30189'
weather <- httr::GET(weather_url)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/?lat=51.48494;lon=-0.30189'
weather <- httr::GET(weather_url)
weather <- httr::GET(weather_URL)
View(weather)
weather[["content"]]
weather_URL <- 'https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
View(weather)
weather_URL <- 'https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=-16.516667&lon=-68.166667&altitude=4150'
weather <- httr::GET(weather_URL)
View(weather)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- httr::GET(weather_URL)
weather
View(weather)
weather$content
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
demoweather_URL <- 'https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=-16.516667&lon=-68.166667&altitude=4150'
oldweather_URL <- 'http://api.met.no/weatherapi/locationforecast/1.9/?lat=51.48494;lon=-0.30189'
weather <- httr::GET(oldweather_URL)
View(weather)
View(weather)
oldweather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/?lat=51.48494;lon=-0.30189'
weather <- httr::GET(oldweather_URL)
View(weather)
content(weather, "text")
weather <- content(weather, "text")
install.packages("jsonlite")
?jsonlite
weather <- jsonlite::fromJSON(weather_URL)
View(weather)
weather <- jsonlite::fromJSON(oldweather_URL)
weather <- httr::GET(oldweather_URL)
weather <- jsonlite::fromJSON(weather)
weather <- jsonlite::fromJSON(weather$content)
weather2 <- jsonlite::fromJSON(oldweather_URL)
weather3 <- jsonlite::fromJSON(demoweather_URL)
View(weather3)
weather3[["properties"]][["timeseries"]]
View(weather3)
weather3$properties
weather4 <- weather3$properties$timeseries
View(weather4)
weather <- httr::GET(weather_URL)
weather3 <- jsonlite::fromJSON(demoweather_URL)
weather4 <- weather3$properties$timeseries
weather <- httr::GET(weather_URL)
weather3 <- jsonlite::fromJSON(demoweather_URL)
weather4 <- weather3$properties$timeseries
library(jsonlite)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather3 <- jsonlite::fromJSON(weather_URL)
weather4 <- weather3$properties$timeseries
View(weather4)
library(dplyr)
View(weather4)
columnnames(weather4) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
colnames(weather4) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather4 <- as.dataframe(weather3$properties$timeseries)
weather4 <- as.df(weather3$properties$timeseries)
weather4 <- as.data.frame(weather3$properties$timeseries)
View(weather4)
weather4 <- flatten(weather3$properties$timeseries)
View(weather4)
colnames(weather4) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
library(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
shiny::runApp()
library(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- flatten(weather$properties$timeseries)
View(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather2 <- flatten(weather$properties$timeseries)
weather2 <- flatten(weather$properties$timeseries)
weather2 <- (weather$properties$timeseries)
weather <- flatten(weather)
weather <- (weather$properties$timeseries)
weather <- flatten(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- (weather$properties$timeseries)
weather <- flatten(weather)
View(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- (weather$properties$timeseries)
View(weather)
weather <- flatten(weather, recursive = FALSE)
weather <- flatten(weather, recursive = TRUE)
weather <- flatten(weather)
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather <- as.data.frame(weather$properties$timeseries)
weather <- flatten(weather)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
#we might want to seperate out the instant/12hour/6hour/1hour data but for now I'm just gonna flatten it all and sort it out later
weather2 <- as.data.frame(weather$properties$timeseries)
weather3 <- flatten(weather2)
View(weather3)
ibrary(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather2 <- as.data.frame(weather$properties$timeseries)
weather3 <- flatten(weather2)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather3 <- jsonlite::fromJSON(weather_URL)
weather4 <- as.data.frame(weather3$properties$timeseries)
weather5 <- jsonlite::flatten(weather4)
View(weather5)
colnames(weather4) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
library(dplyr)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none") )
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(weather)
ymd_hms(2020-06-17T23:00:00Z)
parse_date_time(2020-06-17T23:00:00Z)
parse_date_time("2020-06-17T23:00:00Z")
parse_date_time("2020-06-17T23:00:00Z","Ymd HMS")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
ggplot(weather, aes(x=time, y=temp_air)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
runApp()
ggplot(weather, aes(x=time, y=precip_6hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
ggplot(weather, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
runApp()
runApp()
View(weather)
library(jsonlite)
library(dplyr)
library(lubridate)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
ggplot(weather, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(weather)
runApp()
library(jsonlite)
library(dplyr)
library(lubridate)
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
weather2 <- weather %>% select(time, precip_1hr) %>% head(12)
View(weather2)
ggplot(weather2, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
weather_URL <- 'http://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.484940&lon=-0.301890&altitude=28'
weather <- jsonlite::fromJSON(weather_URL)
weather <- jsonlite::flatten(weather$properties$timeseries)
colnames(weather) <- c("time","pressure","temp_air",
"cloudcover","cloudcover_high","cloudcover_low","cloudcover_medium",
"dewpoint","fog","humidity","uv","winddirection","windspeed",
"symbol_12hr","symbol_1hr","precip_1hr",
"symbol_6hr","temp_air_max_6hr","temp_air_min_6hr","precip_6hr")
weather$time <- parse_date_time(weather$time,"Ymd HMS")
weather2 <- weather %>% select(time, precip_1hr) %>% head(12)
ggplot(weather2, aes(x=time, y=precip_1hr)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
get(auth)
keys <- get("auth")
View(keys)
lat <- 51.484940
long <- -0.301890
stormglass_URL <- paste0('/"https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed/" -H /"Authorization:',keys$stormglass,'/"')
stormglass_URL <- paste0('/"https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed/" -H /"Authorization:',keys$stormglass,'/"')
stormglass <- jsonlite::fromJSON(stormglass_URL)
stormglass_URL <- paste0('https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed -H /"Authorization:',keys$stormglass,'/"')
stormglass <- jsonlite::fromJSON(stormglass_URL)
stormglass_URL <- paste0('https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed -H Authorization:',keys$stormglass)
stormglass <- jsonlite::fromJSON(stormglass_URL)
API_KEY = keys$stormglass
url = paste0("https://api.stormglass.io/v2/weather/point?lat=58.7984&lng=17.8081&params=windSpeed")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
API_KEY = keys$stormglass
url = paste0("https://api.stormglass.io/v2/weather/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
results[["errors"]][["params"]]
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long)
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/extremes/point?lat=",lat,"&lng=",long, "&start=2019-03-15&end=2019-03-15")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide//sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-01&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-01&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-18&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
url = paste0("https://api.stormglass.io/v2/tide/sea-level/point?lat=",lat,"&lng=",long, "&start=2020-06-17&end=2020-06-18")
httpResponse <- GET(url, add_headers(Authorization = API_KEY), accept_json())
results = fromJSON(content(httpResponse, "text"))
View(results)
result2 <- jsonlite::flatten(results$data)
result2 <- (results$data)
View(result2)
result2 <- unlist(results$data)
result2 <- jsonlite::flatten(as.data.frame(results$data))
View(result2)
result2 <- (as.data.frame(results$data))
results = fromJSON(content(httpResponse))
results = fromJSON(content(httpResponse, "text"))
results3 <- sapply(results, function(x) x [[2]] )
View(results3)
results3 <- sapply(results$data, function(x) x [[2]] )
results3 <- sapply(results$data, function(x) x[[1]][[2]] )
results$data[1]
results$data[2]
results$data$sg
results$data[[1]]$sg
results3 <- sapply(results$data, function(x) x[[1]]$sg )
result2[[1]]
result2[1]
result2[2]
result2[[1]][2]
result2[[1]][[1]]
result2[[1]][[2]]
result2[[1]][[0]]
result2[[1]][[1]]
result2[[2]][[1]]
result2[[3]][[1]]
result2[[4]][[1]]
result2[[4]]
result2[[5]]
result2[5]
result2[6]
result2 <- (results$data)
result2[[1]][[1]]
result2
result2$sg
result2$time
result2[[16]]$time
result2[[16]]$sg
unlist(result2)
result4 <- unlist(result2)
result5 <- flatten(result2)
View(result5)
result2[[sg]]
result2[[time]]
df <- ldply (result2, data.frame)
library(dplyr)
result2[[time]]
library(dplyr)
df <- ldply (result2, data.frame)
data.frame(t(sapply(results2,c)))
data.frame(t(sapply(result2,c)))
results3 <- data.frame(t(sapply(result2,c)))
View(results3)
results3 <- results3 %>% select(time = parse_date_time(time,"Ymd HMS"),tide = sg )
View(results3)
results3 <- results3 %>% select(time = parse_date_time(resuts3$time,"Ymd HMS"),tide = sg )
results3 <- results3 %>% select(time = parse_date_time(results3$time,"Ymd HMS"),tide = sg )
View(results3)
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3 <- data.frame(t(sapply(result2,c)))
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3 <- data.frame(t(sapply(result2,c))) %>% unnest()
results3 <- data.frame(t(sapply(result2,c))) %>% unnest(cols = c(time,sg))
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
results3$time <- parse_date_time(results3$time, "Ymd HMS")
View(results3)
results3 <- data.frame(t(sapply(result2,c))) %>% unnest(cols = c(time,sg))
View(results3)
?strptime
results3$time <- parse_date_time(results3$time, "Ymd HMSzzzz")
View(results3)
results3$time <- parse_date_time(results3$time, "Ymd HMSZZ:ZZ")
results3$time <- parse_date_time(results3$time, "Ymd HMS Z")
results3$time <- parse_date_time(results3$time, "Ymd HMS z")
View(results3)
ggplot(results3, aes(x=time, y=sg)) +
geom_line(aes(color =  "#FFCC99")) +
theme_lcars_dark() +
theme(legend.position = "none")
View(results3)
